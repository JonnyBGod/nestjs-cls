"use strict";(self.webpackChunknestjs_cls_docs=self.webpackChunknestjs_cls_docs||[]).push([[775],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},N=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),c=m(n),N=r,u=c["".concat(l,".").concat(N)]||c[N]||k[N]||i;return n?a.createElement(u,o(o({ref:t},s),{},{components:n})):a.createElement(u,o({ref:t},s))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=N;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[c]="string"==typeof e?e:r,o[1]=p;for(var m=2;m<i;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}N.displayName="MDXCreateElement"},9579:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>k,frontMatter:()=>i,metadata:()=>p,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const i={},o="Service Interface",p={unversionedId:"api/service-interface",id:"api/service-interface",title:"Service Interface",description:"ClsService",source:"@site/docs/04_api/01_service-interface.md",sourceDirName:"04_api",slug:"/api/service-interface",permalink:"/nestjs-cls/api/service-interface",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/04_api/01_service-interface.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"API",permalink:"/nestjs-cls/api/"},next:{title:"Module Options",permalink:"/nestjs-cls/api/module-options"}},l={},m=[{value:"ClsService",id:"clsservice",level:2},{value:"ClsContextOptions",id:"clscontextoptions",level:2}],s={toc:m},c="wrapper";function k(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"service-interface"},"Service Interface"),(0,r.kt)("h2",{id:"clsservice"},"ClsService"),(0,r.kt)("p",null,"The injectable ",(0,r.kt)("inlineCode",{parentName:"p"},"ClsService")," provides the following API to manipulate the cls context:"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"S")," type parameter is used as the type of custom ",(0,r.kt)("inlineCode",{parentName:"p"},"ClsStore"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("inlineCode",{parentName:"em"},"get"))),(0,r.kt)("inlineCode",{parentName:"p"},"(): S"),(0,r.kt)("br",{parentName:"p"}),"\n","Get the entire CLS context.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("inlineCode",{parentName:"em"},"get"))),(0,r.kt)("inlineCode",{parentName:"p"},"(key?: keyof S): S[key]"),(0,r.kt)("br",{parentName:"p"}),"\n","Retrieve a value from the CLS context by key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("inlineCode",{parentName:"em"},"getId"))),(0,r.kt)("inlineCode",{parentName:"p"},"(): string;"),(0,r.kt)("br",{parentName:"p"}),"\n","Retrieve the request ID (a shorthand for ",(0,r.kt)("inlineCode",{parentName:"p"},"cls.get(CLS_ID)"),")")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("inlineCode",{parentName:"em"},"has"))),(0,r.kt)("inlineCode",{parentName:"p"},"(key: keyof S): boolean"),(0,r.kt)("br",{parentName:"p"}),"\n","Check if a key is in the CLS context.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("inlineCode",{parentName:"em"},"set"))),(0,r.kt)("inlineCode",{parentName:"p"},"(key: keyof S, value: S[key]): void"),(0,r.kt)("br",{parentName:"p"}),"\n","Set a value on the CLS context.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("inlineCode",{parentName:"em"},"setIfUndefined"))),(0,r.kt)("inlineCode",{parentName:"p"},"(key: keyof S, value: S[key]): void"),(0,r.kt)("br",{parentName:"p"}),"\n","Set a value on the CLS context ",(0,r.kt)("em",{parentName:"p"},"only")," if it hasn't been already set. Useful for ensuring idempotence if you have multiple entry points.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("inlineCode",{parentName:"em"},"run"))),(0,r.kt)("inlineCode",{parentName:"p"},"(callback: () => T): T"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("inlineCode",{parentName:"em"},"run"))),(0,r.kt)("inlineCode",{parentName:"p"},"(options: ClsContextOptions, callback: () => T): T;"),(0,r.kt)("br",{parentName:"p"}),"\n","Run the callback in a shared CLS context. Optionally takes an ",(0,r.kt)("a",{parentName:"p",href:"#clscontextoptions"},"options object")," as the first parameter.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("inlineCode",{parentName:"em"},"runWith"))),(0,r.kt)("inlineCode",{parentName:"p"},"(store: S, callback: () => T): T"),(0,r.kt)("br",{parentName:"p"}),"\n","Run the callback in a new CLS context (while supplying the default store).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("inlineCode",{parentName:"em"},"enter"))),(0,r.kt)("inlineCode",{parentName:"p"},"(): void;"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("inlineCode",{parentName:"em"},"enter"))),(0,r.kt)("inlineCode",{parentName:"p"},"(options: ClsContextOptions): void"),(0,r.kt)("br",{parentName:"p"}),"\n","Run any following code in a shared CLS context. Optionally takes an ",(0,r.kt)("a",{parentName:"p",href:"#clscontextoptions"},"options object")," as the first parameter.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("inlineCode",{parentName:"em"},"enterWith"))),(0,r.kt)("inlineCode",{parentName:"p"},"(store: S): void"),(0,r.kt)("br",{parentName:"p"}),"\n","Run any following code in a new CLS context (while supplying the default store).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("inlineCode",{parentName:"em"},"exit"))),(0,r.kt)("inlineCode",{parentName:"p"},"(callback: () => T): T"),(0,r.kt)("br",{parentName:"p"}),"\n","Run the callback ",(0,r.kt)("em",{parentName:"p"},"without")," access to a shared CLS context.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("inlineCode",{parentName:"em"},"isActive"))),(0,r.kt)("inlineCode",{parentName:"p"},"(): boolean"),(0,r.kt)("br",{parentName:"p"}),"\n","Whether the current code runs within an active CLS context.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("inlineCode",{parentName:"em"},"resolveProxyProviders"))),(0,r.kt)("inlineCode",{parentName:"p"},"(): Promise<void>"),(0,r.kt)("br",{parentName:"p"}),"\n","Manually trigger resolution of Proxy Providers."))),(0,r.kt)("h2",{id:"clscontextoptions"},"ClsContextOptions"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"enter")," methods can take an additional options object with the following settings:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("inlineCode",{parentName:"em"},"ifNested?:")))," ",(0,r.kt)("inlineCode",{parentName:"li"},"'override' | 'inherit' | 'reuse'"),(0,r.kt)("br",{parentName:"li"}),"Sets the behavior of nested CLS context creation in case the method is invoked in an existing context. It has no effect if no parent context exist.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"override")," (default) - Run the callback with an new empty context.",(0,r.kt)("br",{parentName:"li"}),"No values from the parent context will be accessible within the wrapped code."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"inherit")," - Run the callback with a shallow copy of the parent context.",(0,r.kt)("br",{parentName:"li"}),"Re-assignments of top-level properties will not be reflected in the parent context. However, modifications of existing properties ",(0,r.kt)("em",{parentName:"li"},"will")," be reflected."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"reuse")," - Reuse existing context without creating a new one. All modifications to the existing context will be reflected.")))))}k.isMDXComponent=!0}}]);
"use strict";(self.webpackChunknestjs_cls_docs=self.webpackChunknestjs_cls_docs||[]).push([[872],{5318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),y=a,m=u["".concat(l,".").concat(y)]||u[y]||d[y]||s;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=y;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:a,i[1]=o;for(var p=2;p<s;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},15:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var r=n(5773),a=(n(7378),n(5318));const s={},i="Type safety and type inference",o={unversionedId:"features-and-use-cases/type-safety-and-type-inference",id:"features-and-use-cases/type-safety-and-type-inference",title:"Type safety and type inference",description:"Since v2.0",source:"@site/docs/03_features-and-use-cases/05_type-safety-and-type-inference.md",sourceDirName:"03_features-and-use-cases",slug:"/features-and-use-cases/type-safety-and-type-inference",permalink:"/nestjs-cls/features-and-use-cases/type-safety-and-type-inference",draft:!1,editUrl:"https://github.com/Papooch/nestjs-cls/tree/main/docs/docs/03_features-and-use-cases/05_type-safety-and-type-inference.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Usage outside of web request",permalink:"/nestjs-cls/features-and-use-cases/usage-outside-of-web-request"},next:{title:"Proxy Providers",permalink:"/nestjs-cls/features-and-use-cases/proxy-providers"}},l={},p=[{value:"Type-safe ClsService",id:"type-safe-clsservice",level:2},{value:"Using a type parameter",id:"using-a-type-parameter",level:3},{value:"Using Typescript module augmentation",id:"using-typescript-module-augmentation",level:3},{value:"Using a custom provider",id:"using-a-custom-provider",level:3},{value:"Terminal Type",id:"terminal-type",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"type-safety-and-type-inference"},"Type safety and type inference"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Since ",(0,a.kt)("inlineCode",{parentName:"p"},"v2.0"))),(0,a.kt)("p",null,"By default the CLS context is untyped and allows setting and retrieving any ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"symbol")," keys from the context. Some safety can be enforced by using ",(0,a.kt)("inlineCode",{parentName:"p"},"CONSTANTS")," instead of magic strings, but that might not be enough."),(0,a.kt)("h2",{id:"type-safe-clsservice"},"Type-safe ClsService"),(0,a.kt)("p",null,"It is possible to specify a custom interface for the ",(0,a.kt)("inlineCode",{parentName:"p"},"ClsService")," and get proper typing and automatic type inference when retrieving or setting values. This works even for ",(0,a.kt)("em",{parentName:"p"},"nested objects")," using a dot notation."),(0,a.kt)("p",null,"To create a typed CLS Store, start by creating an interface that extends ",(0,a.kt)("inlineCode",{parentName:"p"},"ClsStore"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=my-cls-service.interface.ts",title:"my-cls-service.interface.ts"},"export interface MyClsStore extends ClsStore {\n    tenantId: string;\n    user: {\n        id: number;\n        authorized: boolean;\n    };\n}\n")),(0,a.kt)("h3",{id:"using-a-type-parameter"},"Using a type parameter"),(0,a.kt)("p",null,"Then you can inject the ",(0,a.kt)("inlineCode",{parentName:"p"},"ClsService")," with a type parameter ",(0,a.kt)("inlineCode",{parentName:"p"},"ClsService<MyClsStore>")," to make use of the safe typing."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export class MyService {\n    // highlight-start\n    constructor(private readonly cls: ClsService<MyClsStore>) {}\n    // highlight-end\n\n    doTheThing() {\n        // a boolean type will be enforced here\n        this.cls.set('user.authorized', true);\n\n        // tenantId will be inferred as a string\n        const tenantId = this.cls.get('tenantId');\n\n        // userId will be inferred as a number\n        const userId = this.cls.get('user.id');\n\n        // user will be inferred as { id: number, authorized: boolean }\n        const user = this.cls.get('user');\n\n        // you'll even get intellisense for the keys, because the type\n        // will be inferred as:\n        // symbol | 'tenantId\u02d9 | 'user' | 'user.id' | 'user.authorized'\n\n        // alternatively, since the `get` method returns the whole store\n        // when called without arguments, you can use object destructuring\n        const { tenantId, user } = this.cls.get();\n\n        // accessing a nonexistent property will result in a type error\n        const notExist = this.cls.get('user.name');\n    }\n}\n")),(0,a.kt)("h3",{id:"using-typescript-module-augmentation"},"Using Typescript module augmentation"),(0,a.kt)("p",null,"Alternatively, if you feel like using ",(0,a.kt)("inlineCode",{parentName:"p"},"ClsService<MyClsStore>")," everywhere is tedious, you can instead globally ",(0,a.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/declaration-merging.html"},"augment the ",(0,a.kt)("inlineCode",{parentName:"a"},"ClsStore interface")),"."),(0,a.kt)("p",null,"Now you don't need to specify the type parameter on ",(0,a.kt)("inlineCode",{parentName:"p"},"ClsService")," to still get the string typing."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"declare module 'nestjs-cls' {\n    interface ClsStore {\n        tenantId: string;\n        user: {\n            id: number;\n            authorized: boolean;\n        };\n    }\n}\n")),(0,a.kt)("h3",{id:"using-a-custom-provider"},"Using a custom provider"),(0,a.kt)("p",null,"For even more transparent approach without augmenting the declaration, you can create a typed ",(0,a.kt)("inlineCode",{parentName:"p"},"ClsService")," by extending it and creating a custom provider out of it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export class MyClsService extends ClsService<MyClsStore> {}\n\n@Module({\n    imports: [ClsModule.forFeature()],\n    providers: [\n        {\n            provide: MyClsService,\n            useExisting: ClsService,\n        },\n    ],\n    exports: [MyClsService],\n})\nclass MyClsModule {}\n")),(0,a.kt)("p",null,"Now you can inject ",(0,a.kt)("inlineCode",{parentName:"p"},"MyClsService")," as an alias for ",(0,a.kt)("inlineCode",{parentName:"p"},"ClsService<MyClsStore>"),' without "polluting" the global type space.'),(0,a.kt)("h2",{id:"terminal-type"},"Terminal Type"),(0,a.kt)("p",null,"It can happen, that the object you want to store in the context is too complex, or contains cyclic references."),(0,a.kt)("p",null,"In that case, typescript might complain that ",(0,a.kt)("em",{parentName:"p"},"type instantiation is too deep, possibly infinite"),". That is due to the fact that it tries to generate all possible paths inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"ClsStore"),". If that's the case, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"Terminal")," type to stop generating the paths for a certain subtree:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface ClsStore {\n    tenantId: string;\n    // highlight-start\n    user: Terminal<{\n        id: number;\n        authorized: boolean;\n    }>;\n    // highlight-end\n}\n")),(0,a.kt)("p",null,"This will only generate the paths ",(0,a.kt)("inlineCode",{parentName:"p"},"tenantId | user")," and won't allow directly accessing nested keys (like ",(0,a.kt)("inlineCode",{parentName:"p"},"cls.get('user.id')"),", but you'll still get fully typing for things like ",(0,a.kt)("inlineCode",{parentName:"p"},"const { id } = cls.get('user')"),"). See issue ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Papooch/nestjs-cls/issues/22"},"#22")," for more details."))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunknestjs_cls_docs=self.webpackChunknestjs_cls_docs||[]).push([[104],{5318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(n),g=a,f=d["".concat(l,".").concat(g)]||d[g]||p[g]||s;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=g;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<s;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6722:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var r=n(5773),a=(n(7378),n(5318));const s={},o="Request ID",i={unversionedId:"features-and-use-cases/request-id",id:"features-and-use-cases/request-id",title:"Request ID",description:"Because of a shared storage, CLS is an ideal tool for tracking request (correlation) IDs for the purpose of logging. This package provides an option to automatically generate request IDs in the middleware/guard/interceptor, if you pass { generateId: true } to its options. By default, the generated ID is a string based on Math.random(), but you can provide a custom function in the idGenerator option.",source:"@site/docs/03_features-and-use-cases/01_request-id.md",sourceDirName:"03_features-and-use-cases",slug:"/features-and-use-cases/request-id",permalink:"/nestjs-cls/features-and-use-cases/request-id",draft:!1,editUrl:"https://github.com/Papooch/nestjs-cls/tree/main/docs/docs/03_features-and-use-cases/01_request-id.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Features and use cases",permalink:"/nestjs-cls/features-and-use-cases/"},next:{title:"Additional CLS Setup",permalink:"/nestjs-cls/features-and-use-cases/additional-cls-setup"}},l={},u=[],c={toc:u},d="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"request-id"},"Request ID"),(0,a.kt)("p",null,"Because of a shared storage, CLS is an ideal tool for tracking request (correlation) IDs for the purpose of logging. This package provides an option to automatically generate request IDs in the middleware/guard/interceptor, if you pass ",(0,a.kt)("inlineCode",{parentName:"p"},"{ generateId: true }")," to its options. By default, the generated ID is a string based on ",(0,a.kt)("inlineCode",{parentName:"p"},"Math.random()"),", but you can provide a custom function in the ",(0,a.kt)("inlineCode",{parentName:"p"},"idGenerator")," option."),(0,a.kt)("p",null,"This function receives the ",(0,a.kt)("inlineCode",{parentName:"p"},"Request")," (or ",(0,a.kt)("inlineCode",{parentName:"p"},"ExecutionContext")," in case a ",(0,a.kt)("inlineCode",{parentName:"p"},"ClsGuard")," is used) as the first parameter, which can be used in the generation process and should return (or resolve with) a string ID that will be stored in the CLS for later use."),(0,a.kt)("p",null,"Below is an example of retrieving the request ID from the request header with a fallback to an autogenerated one."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"ClsModule.forRoot({\n    middleware: {\n        mount: true,\n        // highlight-start\n        generateId: true,\n        idGenerator: (req: Request) =>\n            req.headers['X-Request-Id'] ?? uuid();\n        // highlight-end\n    }\n})\n")),(0,a.kt)("p",null,"The ID is stored under the ",(0,a.kt)("inlineCode",{parentName:"p"},"CLS_ID")," constant in the context. The ",(0,a.kt)("inlineCode",{parentName:"p"},"ClsService")," provides a shorthand method ",(0,a.kt)("inlineCode",{parentName:"p"},"getId")," to quickly retrieve it anywhere. It can be for example used in a custom logger:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="my.logger.ts"',title:'"my.logger.ts"'},"@Injectable()\nclass MyLogger {\n    constructor(private readonly cls: ClsService) {}\n\n    log(message: string) {\n        // highlight-start\n        console.log(`<${this.cls.getId()}> ${message}`);\n        // highlight-end\n    }\n}\n")),(0,a.kt)("p",null,"Calling this from anywhere within a CLS context results in retrieving the ID:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="my.service.ts"',title:'"my.service.ts"'},"@Injectable()\nclass MyService {\n    constructor(private readonly logger: MyLogger);\n\n    hello() {\n        this.logger.log('Hello');\n        // -> logs for ex.: \"<44c2d8ff-49a6-4244-869f-75a2df11517a> Hello\"\n    }\n}\n")))}p.isMDXComponent=!0}}]);
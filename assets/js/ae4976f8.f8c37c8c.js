"use strict";(self.webpackChunknestjs_cls=self.webpackChunknestjs_cls||[]).push([[93],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3668:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const o={},i="Using a Middleware",l={unversionedId:"setting-up-cls-context/using-a-middleware",id:"setting-up-cls-context/using-a-middleware",title:"Using a Middleware",description:"This section applies only if you use a HTTP transport (REST or GraphQL)",source:"@site/docs/02_setting-up-cls-context/01_using-a-middleware.md",sourceDirName:"02_setting-up-cls-context",slug:"/setting-up-cls-context/using-a-middleware",permalink:"/nestjs-cls/setting-up-cls-context/using-a-middleware",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/02_setting-up-cls-context/01_using-a-middleware.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Setting up the CLS context",permalink:"/nestjs-cls/setting-up-cls-context/"},next:{title:"Using a Guard",permalink:"/nestjs-cls/setting-up-cls-context/using-a-guard"}},s={},u=[{value:"Automatically",id:"automatically",level:2},{value:"Manually",id:"manually",level:2},{value:"In the module",id:"in-the-module",level:3},{value:"Using app.use",id:"using-appuse",level:3}],p={toc:u},d="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"using-a-middleware"},"Using a Middleware"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This section applies only if you use a HTTP transport (REST or GraphQL)")),(0,r.kt)("p",null,"Since in NestJS, HTTP ",(0,r.kt)("strong",{parentName:"p"},"middleware")," is the first thing to run when a request arrives, it is an ideal place to initialise the CLS context. This package provides ",(0,r.kt)("inlineCode",{parentName:"p"},"ClsMiddleware")," that can be mounted to all (or selected) routes inside which the context is set up before the ",(0,r.kt)("inlineCode",{parentName:"p"},"next()")," call."),(0,r.kt)("p",null,"All you have to do is mount it to routes in which you want to use CLS, or pass ",(0,r.kt)("inlineCode",{parentName:"p"},"middleware: { mount: true }")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"ClsModule.forRoot()")," options which automatically mounts it to all routes."),(0,r.kt)("p",null,"Once that is set up, the ",(0,r.kt)("inlineCode",{parentName:"p"},"ClsService")," will have access to a common storage in all ",(0,r.kt)("em",{parentName:"p"},"Guards, Interceptors, Pipes, Controllers, Services and Exception Filters")," that are called within that route."),(0,r.kt)("h2",{id:"automatically"},"Automatically"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="app.module.ts"',title:'"app.module.ts"'},"@Module({\n    imports: [\n        ClsModule.forRoot({\n            global: true,\n            // highlight-start\n            middleware: { mount: true },\n            // highlight-end\n        }),\n    ],\n    // ...\n})\nexport class AppModule {}\n")),(0,r.kt)("h2",{id:"manually"},"Manually"),(0,r.kt)("p",null,"Sometimes, you might want to only use CLS on certain routes, or you need to have more control over the order of middleware registration in combination with other middlewares."),(0,r.kt)("h3",{id:"in-the-module"},"In the module"),(0,r.kt)("p",null,"In that case, omit the ",(0,r.kt)("inlineCode",{parentName:"p"},"mount")," option or set it to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," and bind the ",(0,r.kt)("inlineCode",{parentName:"p"},"ClsMiddleware")," manually in the module:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="app.module.ts"',title:'"app.module.ts"'},"@Module({\n    imports: [\n        ClsModule.forRoot({\n            global: true,\n            // highlight-start\n            middleware: { mount: false },\n            // highlight-end\n        }),\n    ],\n    // ...\n})\nexport class AppModule implements NestModule {\n    configure(consumer: MiddlewareConsumer) {\n        // highlight-start\n        consumer.apply(ClsMiddleware).forRoutes('custom/route');\n        // highlight-end\n    }\n}\n")),(0,r.kt)("h3",{id:"using-appuse"},"Using app.use"),(0,r.kt)("p",null,"Sometimes, however, the previous method won't be enough, because the middleware could be mounted too late and you won't be able to use it in other middlewares that need to run prior to that - for example, the API versioning feature of NestJS apparently interferes with the order, see issue ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Papooch/nestjs-cls/issues/67"},"#67"),"."),(0,r.kt)("p",null,"In that case, you can mount it directly in the bootstrap method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="main.ts"',title:'"main.ts"'},"function bootstrap() {\n    const app = await NestFactory.create(AppModule);\n    // create and mount the middleware manually here\n    app.use(\n        // highlight-start\n        new ClsMiddleware({\n            /* ...settings */\n        }).use,\n        // highlight-end\n    );\n    await app.listen(3000);\n}\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Please note"),": If you bind the middleware using ",(0,r.kt)("inlineCode",{parentName:"p"},"app.use()"),", it will not respect middleware settings passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"ClsModule.forRoot()"),", so you will have to provide them yourself in the constructor.")))}c.isMDXComponent=!0}}]);